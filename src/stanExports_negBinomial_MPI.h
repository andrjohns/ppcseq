// Generated by rstantools.  Do not edit by hand.

/*
    ppcSeq is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    ppcSeq is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with ppcSeq.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.18.1

#include <stan/model/model_header.hpp>

namespace model_negBinomial_MPI_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_negBinomial_MPI");
    reader.add_event(203, 201, "end", "model_negBinomial_MPI");
    return reader;
}

template <bool propto, typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
exp_gamma_meanSd_lpdf(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& x_log,
                          const T1__& m_log,
                          const T2__& s, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 8;
        local_scalar_t__ m;
        (void) m;  // dummy to suppress unused var warning

        stan::math::initialize(m, DUMMY_VAR__);
        stan::math::fill(m,DUMMY_VAR__);
        stan::math::assign(m,stan::math::exp(m_log));
        current_statement_begin__ = 9;
        local_scalar_t__ v;
        (void) v;  // dummy to suppress unused var warning

        stan::math::initialize(v, DUMMY_VAR__);
        stan::math::fill(v,DUMMY_VAR__);
        stan::math::assign(v,(m + (square(m) * s)));
        current_statement_begin__ = 10;
        local_scalar_t__ a;
        (void) a;  // dummy to suppress unused var warning

        stan::math::initialize(a, DUMMY_VAR__);
        stan::math::fill(a,DUMMY_VAR__);
        stan::math::assign(a,(square(m) / v));
        current_statement_begin__ = 11;
        local_scalar_t__ b;
        (void) b;  // dummy to suppress unused var warning

        stan::math::initialize(b, DUMMY_VAR__);
        stan::math::fill(b,DUMMY_VAR__);
        stan::math::assign(b,(m / v));
        current_statement_begin__ = 13;
        validate_non_negative_index("jacob", "rows(x_log)", rows(x_log));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  jacob(static_cast<Eigen::VectorXd::Index>(rows(x_log)));
        (void) jacob;  // dummy to suppress unused var warning

        stan::math::initialize(jacob, DUMMY_VAR__);
        stan::math::fill(jacob,DUMMY_VAR__);
        stan::math::assign(jacob,x_log);
        current_statement_begin__ = 14;
        local_scalar_t__ norm_constant;
        (void) norm_constant;  // dummy to suppress unused var warning

        stan::math::initialize(norm_constant, DUMMY_VAR__);
        stan::math::fill(norm_constant,DUMMY_VAR__);
        stan::math::assign(norm_constant,((a * stan::math::log(b)) - stan::math::lgamma(a)));
        current_statement_begin__ = 15;
        local_scalar_t__ a_minus_1;
        (void) a_minus_1;  // dummy to suppress unused var warning

        stan::math::initialize(a_minus_1, DUMMY_VAR__);
        stan::math::fill(a_minus_1,DUMMY_VAR__);
        stan::math::assign(a_minus_1,(a - 1));


        current_statement_begin__ = 16;
        return stan::math::promote_scalar<fun_return_scalar_t__>(((sum(jacob) + (norm_constant * rows(x_log))) + sum(subtract(multiply(x_log,a_minus_1),multiply(stan::math::exp(x_log),b)))));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
exp_gamma_meanSd_lpdf(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& x_log,
                          const T1__& m_log,
                          const T2__& s, std::ostream* pstream__) {
    return exp_gamma_meanSd_lpdf<false>(x_log,m_log,s, pstream__);
}


struct exp_gamma_meanSd_lpdf_functor__ {
    template <bool propto, typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& x_log,
                          const T1__& m_log,
                          const T2__& s, std::ostream* pstream__) const {
        return exp_gamma_meanSd_lpdf(x_log, m_log, s, pstream__);
    }
};

template <typename T0__, typename T1__, class RNG>
typename boost::math::tools::promote_args<T0__, T1__>::type
exp_gamma_meanSd_rng(const T0__& m_log,
                         const T1__& s, RNG& base_rng__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 24;
        local_scalar_t__ m;
        (void) m;  // dummy to suppress unused var warning

        stan::math::initialize(m, DUMMY_VAR__);
        stan::math::fill(m,DUMMY_VAR__);
        stan::math::assign(m,stan::math::exp(m_log));
        current_statement_begin__ = 25;
        local_scalar_t__ v;
        (void) v;  // dummy to suppress unused var warning

        stan::math::initialize(v, DUMMY_VAR__);
        stan::math::fill(v,DUMMY_VAR__);
        stan::math::assign(v,(m + (square(m) * s)));
        current_statement_begin__ = 26;
        local_scalar_t__ a;
        (void) a;  // dummy to suppress unused var warning

        stan::math::initialize(a, DUMMY_VAR__);
        stan::math::fill(a,DUMMY_VAR__);
        stan::math::assign(a,(square(m) / v));
        current_statement_begin__ = 27;
        local_scalar_t__ b;
        (void) b;  // dummy to suppress unused var warning

        stan::math::initialize(b, DUMMY_VAR__);
        stan::math::fill(b,DUMMY_VAR__);
        stan::math::assign(b,(m / v));


        current_statement_begin__ = 29;
        return stan::math::promote_scalar<fun_return_scalar_t__>(stan::math::log(gamma_rng(a,b, base_rng__)));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct exp_gamma_meanSd_rng_functor__ {
    template <typename T0__, typename T1__, class RNG>
        typename boost::math::tools::promote_args<T0__, T1__>::type
    operator()(const T0__& m_log,
                         const T1__& s, RNG& base_rng__, std::ostream* pstream__) const {
        return exp_gamma_meanSd_rng(m_log, s, base_rng__, pstream__);
    }
};

template <typename T4__, typename T5__, typename T6__>
std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T4__, T5__, T6__>::type, Eigen::Dynamic,1> >
get_reference_parameters_MPI(const int& n_shards,
                                 const int& M,
                                 const std::vector<int>& G_per_shard,
                                 const std::vector<std::vector<int> >& G_ind,
                                 const Eigen::Matrix<T4__, Eigen::Dynamic,Eigen::Dynamic>& lambda_log,
                                 const Eigen::Matrix<T5__, Eigen::Dynamic,1>& sigma,
                                 const Eigen::Matrix<T6__, Eigen::Dynamic,1>& exposure_rate, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T4__, T5__, T6__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 34;
        int S(0);
        (void) S;  // dummy to suppress unused var warning

        stan::math::fill(S, std::numeric_limits<int>::min());
        stan::math::assign(S,cols(exposure_rate));
        current_statement_begin__ = 35;
        validate_non_negative_index("lambda_sigma_exposure_MPI", "(((M * S) + M) + S)", (((M * S) + M) + S));
        validate_non_negative_index("lambda_sigma_exposure_MPI", "n_shards", n_shards);
        vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> > lambda_sigma_exposure_MPI(n_shards, (Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>((((M * S) + M) + S)))));
        stan::math::initialize(lambda_sigma_exposure_MPI, DUMMY_VAR__);
        stan::math::fill(lambda_sigma_exposure_MPI,DUMMY_VAR__);


        current_statement_begin__ = 37;
        for (int i = 1; i <= n_shards; ++i) {
            {
            current_statement_begin__ = 39;
            int size_buffer(0);
            (void) size_buffer;  // dummy to suppress unused var warning

            stan::math::fill(size_buffer, std::numeric_limits<int>::min());
            stan::math::assign(size_buffer,(((M * S) + M) - ((get_base1(G_per_shard,i,"G_per_shard",1) * S) + get_base1(G_per_shard,i,"G_per_shard",1))));
            current_statement_begin__ = 40;
            validate_non_negative_index("buffer", "size_buffer", size_buffer);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  buffer(static_cast<Eigen::VectorXd::Index>(size_buffer));
            (void) buffer;  // dummy to suppress unused var warning

            stan::math::initialize(buffer, DUMMY_VAR__);
            stan::math::fill(buffer,DUMMY_VAR__);
            stan::math::assign(buffer,rep_vector(0.0,size_buffer));


            current_statement_begin__ = 42;
            stan::model::assign(lambda_sigma_exposure_MPI, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                        append_row(append_row(append_row(to_vector(stan::model::rvalue(lambda_log, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_multi(stan::model::rvalue(G_ind, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_min_max(1, get_base1(G_per_shard,i,"G_per_shard",1)), stan::model::nil_index_list())), "G_ind")), stan::model::nil_index_list())), "lambda_log")),stan::model::rvalue(sigma, stan::model::cons_list(stan::model::index_multi(stan::model::rvalue(G_ind, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_min_max(1, get_base1(G_per_shard,i,"G_per_shard",1)), stan::model::nil_index_list())), "G_ind")), stan::model::nil_index_list()), "sigma")),buffer),exposure_rate), 
                        "assigning variable lambda_sigma_exposure_MPI");
            }
        }
        current_statement_begin__ = 55;
        return stan::math::promote_scalar<fun_return_scalar_t__>(lambda_sigma_exposure_MPI);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct get_reference_parameters_MPI_functor__ {
    template <typename T4__, typename T5__, typename T6__>
        std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T4__, T5__, T6__>::type, Eigen::Dynamic,1> >
    operator()(const int& n_shards,
                                 const int& M,
                                 const std::vector<int>& G_per_shard,
                                 const std::vector<std::vector<int> >& G_ind,
                                 const Eigen::Matrix<T4__, Eigen::Dynamic,Eigen::Dynamic>& lambda_log,
                                 const Eigen::Matrix<T5__, Eigen::Dynamic,1>& sigma,
                                 const Eigen::Matrix<T6__, Eigen::Dynamic,1>& exposure_rate, std::ostream* pstream__) const {
        return get_reference_parameters_MPI(n_shards, M, G_per_shard, G_ind, lambda_log, sigma, exposure_rate, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
lp_reduce(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& global_parameters,
              const Eigen::Matrix<T1__, Eigen::Dynamic,1>& local_parameters,
              const std::vector<T2__>& real_data,
              const std::vector<int>& int_data, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 61;
        int M(0);
        (void) M;  // dummy to suppress unused var warning

        stan::math::fill(M, std::numeric_limits<int>::min());
        stan::math::assign(M,get_base1(int_data,1,"int_data",1));
        current_statement_begin__ = 62;
        int N(0);
        (void) N;  // dummy to suppress unused var warning

        stan::math::fill(N, std::numeric_limits<int>::min());
        stan::math::assign(N,get_base1(int_data,2,"int_data",1));
        current_statement_begin__ = 63;
        int S(0);
        (void) S;  // dummy to suppress unused var warning

        stan::math::fill(S, std::numeric_limits<int>::min());
        stan::math::assign(S,get_base1(int_data,3,"int_data",1));
        current_statement_begin__ = 64;
        int G_per_shard(0);
        (void) G_per_shard;  // dummy to suppress unused var warning

        stan::math::fill(G_per_shard, std::numeric_limits<int>::min());
        stan::math::assign(G_per_shard,get_base1(int_data,4,"int_data",1));
        current_statement_begin__ = 65;
        validate_non_negative_index("symbol_end", "(M + 1)", (M + 1));
        vector<int> symbol_end((M + 1), 0);
        stan::math::fill(symbol_end, std::numeric_limits<int>::min());
        stan::math::assign(symbol_end,stan::model::rvalue(int_data, stan::model::cons_list(stan::model::index_min_max((4 + 1), ((4 + 1) + M)), stan::model::nil_index_list()), "int_data"));
        current_statement_begin__ = 66;
        validate_non_negative_index("sample_idx", "N", N);
        vector<int> sample_idx(N, 0);
        stan::math::fill(sample_idx, std::numeric_limits<int>::min());
        stan::math::assign(sample_idx,stan::model::rvalue(int_data, stan::model::cons_list(stan::model::index_min_max((((4 + 1) + M) + 1), (((((4 + 1) + M) + 1) + N) - 1)), stan::model::nil_index_list()), "int_data"));
        current_statement_begin__ = 67;
        validate_non_negative_index("counts", "N", N);
        vector<int> counts(N, 0);
        stan::math::fill(counts, std::numeric_limits<int>::min());
        stan::math::assign(counts,stan::model::rvalue(int_data, stan::model::cons_list(stan::model::index_min_max(((((((4 + 1) + M) + 1) + N) - 1) + 1), size(int_data)), stan::model::nil_index_list()), "int_data"));
        current_statement_begin__ = 70;
        validate_non_negative_index("lambda_MPI", "(G_per_shard * S)", (G_per_shard * S));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  lambda_MPI(static_cast<Eigen::VectorXd::Index>((G_per_shard * S)));
        (void) lambda_MPI;  // dummy to suppress unused var warning

        stan::math::initialize(lambda_MPI, DUMMY_VAR__);
        stan::math::fill(lambda_MPI,DUMMY_VAR__);
        stan::math::assign(lambda_MPI,stan::model::rvalue(local_parameters, stan::model::cons_list(stan::model::index_min_max(1, (G_per_shard * S)), stan::model::nil_index_list()), "local_parameters"));
        current_statement_begin__ = 71;
        validate_non_negative_index("sigma_MPI", "G_per_shard", G_per_shard);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  sigma_MPI(static_cast<Eigen::VectorXd::Index>(G_per_shard));
        (void) sigma_MPI;  // dummy to suppress unused var warning

        stan::math::initialize(sigma_MPI, DUMMY_VAR__);
        stan::math::fill(sigma_MPI,DUMMY_VAR__);
        stan::math::assign(sigma_MPI,stan::model::rvalue(local_parameters, stan::model::cons_list(stan::model::index_min_max(((G_per_shard * S) + 1), ((G_per_shard * S) + G_per_shard)), stan::model::nil_index_list()), "local_parameters"));
        current_statement_begin__ = 72;
        validate_non_negative_index("exposure_rate", "S", S);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  exposure_rate(static_cast<Eigen::VectorXd::Index>(S));
        (void) exposure_rate;  // dummy to suppress unused var warning

        stan::math::initialize(exposure_rate, DUMMY_VAR__);
        stan::math::fill(exposure_rate,DUMMY_VAR__);
        stan::math::assign(exposure_rate,stan::model::rvalue(local_parameters, stan::model::cons_list(stan::model::index_min_max((((M * S) + M) + 1), rows(local_parameters)), stan::model::nil_index_list()), "local_parameters"));
        current_statement_begin__ = 76;
        validate_non_negative_index("sigma_MPI_c", "get_base1(symbol_end,(G_per_shard + 1),\"symbol_end\",1)", get_base1(symbol_end,(G_per_shard + 1),"symbol_end",1));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  sigma_MPI_c(static_cast<Eigen::VectorXd::Index>(get_base1(symbol_end,(G_per_shard + 1),"symbol_end",1)));
        (void) sigma_MPI_c;  // dummy to suppress unused var warning

        stan::math::initialize(sigma_MPI_c, DUMMY_VAR__);
        stan::math::fill(sigma_MPI_c,DUMMY_VAR__);


        current_statement_begin__ = 77;
        for (int g = 1; g <= G_per_shard; ++g) {
            {
            current_statement_begin__ = 78;
            int how_many(0);
            (void) how_many;  // dummy to suppress unused var warning

            stan::math::fill(how_many, std::numeric_limits<int>::min());
            stan::math::assign(how_many,(get_base1(symbol_end,(g + 1),"symbol_end",1) - get_base1(symbol_end,g,"symbol_end",1)));


            current_statement_begin__ = 80;
            stan::model::assign(sigma_MPI_c, 
                        stan::model::cons_list(stan::model::index_min_max((get_base1(symbol_end,g,"symbol_end",1) + 1), get_base1(symbol_end,(g + 1),"symbol_end",1)), stan::model::nil_index_list()), 
                        rep_vector(get_base1(sigma_MPI,g,"sigma_MPI",1),how_many), 
                        "assigning variable sigma_MPI_c");
            }
        }
        current_statement_begin__ = 84;
        return stan::math::promote_scalar<fun_return_scalar_t__>(transpose(stan::math::to_row_vector(stan::math::array_builder<local_scalar_t__ >().add(neg_binomial_2_log_log(stan::model::rvalue(counts, stan::model::cons_list(stan::model::index_min_max(1, get_base1(symbol_end,(G_per_shard + 1),"symbol_end",1)), stan::model::nil_index_list()), "counts"),add(stan::model::rvalue(exposure_rate, stan::model::cons_list(stan::model::index_multi(stan::model::rvalue(sample_idx, stan::model::cons_list(stan::model::index_min_max(1, get_base1(symbol_end,(G_per_shard + 1),"symbol_end",1)), stan::model::nil_index_list()), "sample_idx")), stan::model::nil_index_list()), "exposure_rate"),lambda_MPI),sigma_MPI_c)).array())));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct lp_reduce_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& global_parameters,
              const Eigen::Matrix<T1__, Eigen::Dynamic,1>& local_parameters,
              const std::vector<T2__>& real_data,
              const std::vector<int>& int_data, std::ostream* pstream__) const {
        return lp_reduce(global_parameters, local_parameters, real_data, int_data, pstream__);
    }
};

#include <stan_meta_header.hpp>
 class model_negBinomial_MPI : public prob_grad {
private:
    int N;
    int M;
    int G;
    int S;
    int n_shards;
    vector<vector<int> > counts;
    vector<vector<int> > symbol_end;
    vector<vector<int> > G_ind;
    vector<vector<int> > sample_idx;
    vector<int> G_per_shard;
    vector<int> G_per_shard_idx;
    int CP;
    vector<vector<int> > counts_package;
    int C;
    matrix_d X;
    double lambda_mu_mu;
    vector_d global_parameters;
    vector<vector<double> > real_data;
public:
    model_negBinomial_MPI(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_negBinomial_MPI(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_negBinomial_MPI_namespace::model_negBinomial_MPI";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        try {
            current_statement_begin__ = 100;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            current_statement_begin__ = 101;
            context__.validate_dims("data initialization", "M", "int", context__.to_vec());
            M = int(0);
            vals_i__ = context__.vals_i("M");
            pos__ = 0;
            M = vals_i__[pos__++];
            current_statement_begin__ = 102;
            context__.validate_dims("data initialization", "G", "int", context__.to_vec());
            G = int(0);
            vals_i__ = context__.vals_i("G");
            pos__ = 0;
            G = vals_i__[pos__++];
            current_statement_begin__ = 103;
            context__.validate_dims("data initialization", "S", "int", context__.to_vec());
            S = int(0);
            vals_i__ = context__.vals_i("S");
            pos__ = 0;
            S = vals_i__[pos__++];
            current_statement_begin__ = 104;
            context__.validate_dims("data initialization", "n_shards", "int", context__.to_vec());
            n_shards = int(0);
            vals_i__ = context__.vals_i("n_shards");
            pos__ = 0;
            n_shards = vals_i__[pos__++];
            current_statement_begin__ = 105;
            validate_non_negative_index("counts", "n_shards", n_shards);
            validate_non_negative_index("counts", "N", N);
            context__.validate_dims("data initialization", "counts", "int", context__.to_vec(n_shards,N));
            validate_non_negative_index("counts", "n_shards", n_shards);
            validate_non_negative_index("counts", "N", N);
            counts = std::vector<std::vector<int> >(n_shards,std::vector<int>(N,int(0)));
            vals_i__ = context__.vals_i("counts");
            pos__ = 0;
            size_t counts_limit_1__ = N;
            for (size_t i_1__ = 0; i_1__ < counts_limit_1__; ++i_1__) {
                size_t counts_limit_0__ = n_shards;
                for (size_t i_0__ = 0; i_0__ < counts_limit_0__; ++i_0__) {
                    counts[i_0__][i_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 106;
            validate_non_negative_index("symbol_end", "n_shards", n_shards);
            validate_non_negative_index("symbol_end", "(M + 1)", (M + 1));
            context__.validate_dims("data initialization", "symbol_end", "int", context__.to_vec(n_shards,(M + 1)));
            validate_non_negative_index("symbol_end", "n_shards", n_shards);
            validate_non_negative_index("symbol_end", "(M + 1)", (M + 1));
            symbol_end = std::vector<std::vector<int> >(n_shards,std::vector<int>((M + 1),int(0)));
            vals_i__ = context__.vals_i("symbol_end");
            pos__ = 0;
            size_t symbol_end_limit_1__ = (M + 1);
            for (size_t i_1__ = 0; i_1__ < symbol_end_limit_1__; ++i_1__) {
                size_t symbol_end_limit_0__ = n_shards;
                for (size_t i_0__ = 0; i_0__ < symbol_end_limit_0__; ++i_0__) {
                    symbol_end[i_0__][i_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 107;
            validate_non_negative_index("G_ind", "n_shards", n_shards);
            validate_non_negative_index("G_ind", "M", M);
            context__.validate_dims("data initialization", "G_ind", "int", context__.to_vec(n_shards,M));
            validate_non_negative_index("G_ind", "n_shards", n_shards);
            validate_non_negative_index("G_ind", "M", M);
            G_ind = std::vector<std::vector<int> >(n_shards,std::vector<int>(M,int(0)));
            vals_i__ = context__.vals_i("G_ind");
            pos__ = 0;
            size_t G_ind_limit_1__ = M;
            for (size_t i_1__ = 0; i_1__ < G_ind_limit_1__; ++i_1__) {
                size_t G_ind_limit_0__ = n_shards;
                for (size_t i_0__ = 0; i_0__ < G_ind_limit_0__; ++i_0__) {
                    G_ind[i_0__][i_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 108;
            validate_non_negative_index("sample_idx", "n_shards", n_shards);
            validate_non_negative_index("sample_idx", "N", N);
            context__.validate_dims("data initialization", "sample_idx", "int", context__.to_vec(n_shards,N));
            validate_non_negative_index("sample_idx", "n_shards", n_shards);
            validate_non_negative_index("sample_idx", "N", N);
            sample_idx = std::vector<std::vector<int> >(n_shards,std::vector<int>(N,int(0)));
            vals_i__ = context__.vals_i("sample_idx");
            pos__ = 0;
            size_t sample_idx_limit_1__ = N;
            for (size_t i_1__ = 0; i_1__ < sample_idx_limit_1__; ++i_1__) {
                size_t sample_idx_limit_0__ = n_shards;
                for (size_t i_0__ = 0; i_0__ < sample_idx_limit_0__; ++i_0__) {
                    sample_idx[i_0__][i_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 109;
            validate_non_negative_index("G_per_shard", "n_shards", n_shards);
            context__.validate_dims("data initialization", "G_per_shard", "int", context__.to_vec(n_shards));
            validate_non_negative_index("G_per_shard", "n_shards", n_shards);
            G_per_shard = std::vector<int>(n_shards,int(0));
            vals_i__ = context__.vals_i("G_per_shard");
            pos__ = 0;
            size_t G_per_shard_limit_0__ = n_shards;
            for (size_t i_0__ = 0; i_0__ < G_per_shard_limit_0__; ++i_0__) {
                G_per_shard[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 110;
            validate_non_negative_index("G_per_shard_idx", "(n_shards + 1)", (n_shards + 1));
            context__.validate_dims("data initialization", "G_per_shard_idx", "int", context__.to_vec((n_shards + 1)));
            validate_non_negative_index("G_per_shard_idx", "(n_shards + 1)", (n_shards + 1));
            G_per_shard_idx = std::vector<int>((n_shards + 1),int(0));
            vals_i__ = context__.vals_i("G_per_shard_idx");
            pos__ = 0;
            size_t G_per_shard_idx_limit_0__ = (n_shards + 1);
            for (size_t i_0__ = 0; i_0__ < G_per_shard_idx_limit_0__; ++i_0__) {
                G_per_shard_idx[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 112;
            context__.validate_dims("data initialization", "CP", "int", context__.to_vec());
            CP = int(0);
            vals_i__ = context__.vals_i("CP");
            pos__ = 0;
            CP = vals_i__[pos__++];
            current_statement_begin__ = 113;
            validate_non_negative_index("counts_package", "n_shards", n_shards);
            validate_non_negative_index("counts_package", "CP", CP);
            context__.validate_dims("data initialization", "counts_package", "int", context__.to_vec(n_shards,CP));
            validate_non_negative_index("counts_package", "n_shards", n_shards);
            validate_non_negative_index("counts_package", "CP", CP);
            counts_package = std::vector<std::vector<int> >(n_shards,std::vector<int>(CP,int(0)));
            vals_i__ = context__.vals_i("counts_package");
            pos__ = 0;
            size_t counts_package_limit_1__ = CP;
            for (size_t i_1__ = 0; i_1__ < counts_package_limit_1__; ++i_1__) {
                size_t counts_package_limit_0__ = n_shards;
                for (size_t i_0__ = 0; i_0__ < counts_package_limit_0__; ++i_0__) {
                    counts_package[i_0__][i_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 115;
            context__.validate_dims("data initialization", "C", "int", context__.to_vec());
            C = int(0);
            vals_i__ = context__.vals_i("C");
            pos__ = 0;
            C = vals_i__[pos__++];
            current_statement_begin__ = 116;
            validate_non_negative_index("X", "S", S);
            validate_non_negative_index("X", "C", C);
            context__.validate_dims("data initialization", "X", "matrix_d", context__.to_vec(S,C));
            validate_non_negative_index("X", "S", S);
            validate_non_negative_index("X", "C", C);
            X = matrix_d(static_cast<Eigen::VectorXd::Index>(S),static_cast<Eigen::VectorXd::Index>(C));
            vals_r__ = context__.vals_r("X");
            pos__ = 0;
            size_t X_m_mat_lim__ = S;
            size_t X_n_mat_lim__ = C;
            for (size_t n_mat__ = 0; n_mat__ < X_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < X_m_mat_lim__; ++m_mat__) {
                    X(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 118;
            context__.validate_dims("data initialization", "lambda_mu_mu", "double", context__.to_vec());
            lambda_mu_mu = double(0);
            vals_r__ = context__.vals_r("lambda_mu_mu");
            pos__ = 0;
            lambda_mu_mu = vals_r__[pos__++];

            // validate, data variables
            current_statement_begin__ = 100;
            check_greater_or_equal(function__,"N",N,0);
            current_statement_begin__ = 101;
            check_greater_or_equal(function__,"M",M,0);
            current_statement_begin__ = 102;
            check_greater_or_equal(function__,"G",G,0);
            current_statement_begin__ = 103;
            check_greater_or_equal(function__,"S",S,0);
            current_statement_begin__ = 104;
            current_statement_begin__ = 105;
            for (int k0__ = 0; k0__ < n_shards; ++k0__) {
                for (int k1__ = 0; k1__ < N; ++k1__) {
                    check_greater_or_equal(function__,"counts[k0__][k1__]",counts[k0__][k1__],0);
                }
            }
            current_statement_begin__ = 106;
            for (int k0__ = 0; k0__ < n_shards; ++k0__) {
                for (int k1__ = 0; k1__ < (M + 1); ++k1__) {
                    check_greater_or_equal(function__,"symbol_end[k0__][k1__]",symbol_end[k0__][k1__],0);
                }
            }
            current_statement_begin__ = 107;
            for (int k0__ = 0; k0__ < n_shards; ++k0__) {
                for (int k1__ = 0; k1__ < M; ++k1__) {
                    check_greater_or_equal(function__,"G_ind[k0__][k1__]",G_ind[k0__][k1__],0);
                }
            }
            current_statement_begin__ = 108;
            for (int k0__ = 0; k0__ < n_shards; ++k0__) {
                for (int k1__ = 0; k1__ < N; ++k1__) {
                    check_greater_or_equal(function__,"sample_idx[k0__][k1__]",sample_idx[k0__][k1__],0);
                }
            }
            current_statement_begin__ = 109;
            for (int k0__ = 0; k0__ < n_shards; ++k0__) {
                check_greater_or_equal(function__,"G_per_shard[k0__]",G_per_shard[k0__],0);
            }
            current_statement_begin__ = 110;
            for (int k0__ = 0; k0__ < (n_shards + 1); ++k0__) {
                check_greater_or_equal(function__,"G_per_shard_idx[k0__]",G_per_shard_idx[k0__],0);
            }
            current_statement_begin__ = 112;
            check_greater_or_equal(function__,"CP",CP,0);
            current_statement_begin__ = 113;
            for (int k0__ = 0; k0__ < n_shards; ++k0__) {
                for (int k1__ = 0; k1__ < CP; ++k1__) {
                    check_greater_or_equal(function__,"counts_package[k0__][k1__]",counts_package[k0__][k1__],0);
                }
            }
            current_statement_begin__ = 115;
            check_greater_or_equal(function__,"C",C,1);
            current_statement_begin__ = 116;
            current_statement_begin__ = 118;
            check_greater_or_equal(function__,"lambda_mu_mu",lambda_mu_mu,0);
            // initialize data variables
            current_statement_begin__ = 123;
            validate_non_negative_index("global_parameters", "0", 0);
            global_parameters = vector_d(static_cast<Eigen::VectorXd::Index>(0));
            stan::math::fill(global_parameters,DUMMY_VAR__);
            current_statement_begin__ = 124;
            validate_non_negative_index("real_data", "n_shards", n_shards);
            validate_non_negative_index("real_data", "0", 0);
            real_data = std::vector<std::vector<double> >(n_shards,std::vector<double>(0,double(0)));
            stan::math::fill(real_data,DUMMY_VAR__);


            // validate transformed data
            current_statement_begin__ = 123;
            current_statement_begin__ = 124;

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 131;
            ++num_params_r__;
            current_statement_begin__ = 132;
            ++num_params_r__;
            current_statement_begin__ = 133;
            validate_non_negative_index("exposure_rate", "S", S);
            num_params_r__ += S;
            current_statement_begin__ = 136;
        validate_non_negative_index("alpha", "C", C);
            validate_non_negative_index("alpha", "G", G);
            num_params_r__ += C * G;
            current_statement_begin__ = 137;
            validate_non_negative_index("sigma_raw_param", "G", G);
            num_params_r__ += G;
            current_statement_begin__ = 141;
            ++num_params_r__;
            current_statement_begin__ = 142;
            ++num_params_r__;
            current_statement_begin__ = 143;
            ++num_params_r__;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_negBinomial_MPI() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("lambda_mu")))
            throw std::runtime_error("variable lambda_mu missing");
        vals_r__ = context__.vals_r("lambda_mu");
        pos__ = 0U;
        context__.validate_dims("initialization", "lambda_mu", "double", context__.to_vec());
        double lambda_mu(0);
        lambda_mu = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(lambda_mu);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable lambda_mu: ") + e.what());
        }

        if (!(context__.contains_r("lambda_sigma")))
            throw std::runtime_error("variable lambda_sigma missing");
        vals_r__ = context__.vals_r("lambda_sigma");
        pos__ = 0U;
        context__.validate_dims("initialization", "lambda_sigma", "double", context__.to_vec());
        double lambda_sigma(0);
        lambda_sigma = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,lambda_sigma);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable lambda_sigma: ") + e.what());
        }

        if (!(context__.contains_r("exposure_rate")))
            throw std::runtime_error("variable exposure_rate missing");
        vals_r__ = context__.vals_r("exposure_rate");
        pos__ = 0U;
        validate_non_negative_index("exposure_rate", "S", S);
        context__.validate_dims("initialization", "exposure_rate", "vector_d", context__.to_vec(S));
        vector_d exposure_rate(static_cast<Eigen::VectorXd::Index>(S));
        for (int j1__ = 0U; j1__ < S; ++j1__)
            exposure_rate(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(exposure_rate);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable exposure_rate: ") + e.what());
        }

        if (!(context__.contains_r("alpha")))
            throw std::runtime_error("variable alpha missing");
        vals_r__ = context__.vals_r("alpha");
        pos__ = 0U;
        validate_non_negative_index("alpha", "C", C);
        validate_non_negative_index("alpha", "G", G);
        context__.validate_dims("initialization", "alpha", "matrix_d", context__.to_vec(C,G));
        matrix_d alpha(static_cast<Eigen::VectorXd::Index>(C),static_cast<Eigen::VectorXd::Index>(G));
        for (int j2__ = 0U; j2__ < G; ++j2__)
            for (int j1__ = 0U; j1__ < C; ++j1__)
                alpha(j1__,j2__) = vals_r__[pos__++];
        try {
            writer__.matrix_unconstrain(alpha);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable alpha: ") + e.what());
        }

        if (!(context__.contains_r("sigma_raw_param")))
            throw std::runtime_error("variable sigma_raw_param missing");
        vals_r__ = context__.vals_r("sigma_raw_param");
        pos__ = 0U;
        validate_non_negative_index("sigma_raw_param", "G", G);
        context__.validate_dims("initialization", "sigma_raw_param", "vector_d", context__.to_vec(G));
        vector_d sigma_raw_param(static_cast<Eigen::VectorXd::Index>(G));
        for (int j1__ = 0U; j1__ < G; ++j1__)
            sigma_raw_param(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(sigma_raw_param);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigma_raw_param: ") + e.what());
        }

        if (!(context__.contains_r("sigma_slope")))
            throw std::runtime_error("variable sigma_slope missing");
        vals_r__ = context__.vals_r("sigma_slope");
        pos__ = 0U;
        context__.validate_dims("initialization", "sigma_slope", "double", context__.to_vec());
        double sigma_slope(0);
        sigma_slope = vals_r__[pos__++];
        try {
            writer__.scalar_ub_unconstrain(0,sigma_slope);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigma_slope: ") + e.what());
        }

        if (!(context__.contains_r("sigma_intercept")))
            throw std::runtime_error("variable sigma_intercept missing");
        vals_r__ = context__.vals_r("sigma_intercept");
        pos__ = 0U;
        context__.validate_dims("initialization", "sigma_intercept", "double", context__.to_vec());
        double sigma_intercept(0);
        sigma_intercept = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(sigma_intercept);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigma_intercept: ") + e.what());
        }

        if (!(context__.contains_r("sigma_sigma")))
            throw std::runtime_error("variable sigma_sigma missing");
        vals_r__ = context__.vals_r("sigma_sigma");
        pos__ = 0U;
        context__.validate_dims("initialization", "sigma_sigma", "double", context__.to_vec());
        double sigma_sigma(0);
        sigma_sigma = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sigma_sigma);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigma_sigma: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        try {
            // model parameters
            stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);

            local_scalar_t__ lambda_mu;
            (void) lambda_mu;  // dummy to suppress unused var warning
            if (jacobian__)
                lambda_mu = in__.scalar_constrain(lp__);
            else
                lambda_mu = in__.scalar_constrain();

            local_scalar_t__ lambda_sigma;
            (void) lambda_sigma;  // dummy to suppress unused var warning
            if (jacobian__)
                lambda_sigma = in__.scalar_lb_constrain(0,lp__);
            else
                lambda_sigma = in__.scalar_lb_constrain(0);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  exposure_rate;
            (void) exposure_rate;  // dummy to suppress unused var warning
            if (jacobian__)
                exposure_rate = in__.vector_constrain(S,lp__);
            else
                exposure_rate = in__.vector_constrain(S);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  alpha;
            (void) alpha;  // dummy to suppress unused var warning
            if (jacobian__)
                alpha = in__.matrix_constrain(C,G,lp__);
            else
                alpha = in__.matrix_constrain(C,G);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  sigma_raw_param;
            (void) sigma_raw_param;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_raw_param = in__.vector_constrain(G,lp__);
            else
                sigma_raw_param = in__.vector_constrain(G);

            local_scalar_t__ sigma_slope;
            (void) sigma_slope;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_slope = in__.scalar_ub_constrain(0,lp__);
            else
                sigma_slope = in__.scalar_ub_constrain(0);

            local_scalar_t__ sigma_intercept;
            (void) sigma_intercept;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_intercept = in__.scalar_constrain(lp__);
            else
                sigma_intercept = in__.scalar_constrain();

            local_scalar_t__ sigma_sigma;
            (void) sigma_sigma;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_sigma = in__.scalar_lb_constrain(0,lp__);
            else
                sigma_sigma = in__.scalar_lb_constrain(0);


            // transformed parameters
            current_statement_begin__ = 148;
            validate_non_negative_index("sigma", "G", G);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  sigma(static_cast<Eigen::VectorXd::Index>(G));
            (void) sigma;  // dummy to suppress unused var warning

            stan::math::initialize(sigma, DUMMY_VAR__);
            stan::math::fill(sigma,DUMMY_VAR__);
            stan::math::assign(sigma,elt_divide(1.0,stan::math::exp(sigma_raw_param)));
            current_statement_begin__ = 150;
            validate_non_negative_index("lambda_log_param", "S", S);
            validate_non_negative_index("lambda_log_param", "G", G);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  lambda_log_param(static_cast<Eigen::VectorXd::Index>(S),static_cast<Eigen::VectorXd::Index>(G));
            (void) lambda_log_param;  // dummy to suppress unused var warning

            stan::math::initialize(lambda_log_param, DUMMY_VAR__);
            stan::math::fill(lambda_log_param,DUMMY_VAR__);
            stan::math::assign(lambda_log_param,multiply(X,alpha));



            // validate transformed parameters
            for (int i0__ = 0; i0__ < G; ++i0__) {
                if (stan::math::is_uninitialized(sigma(i0__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: sigma" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < S; ++i0__) {
                for (int i1__ = 0; i1__ < G; ++i1__) {
                    if (stan::math::is_uninitialized(lambda_log_param(i0__,i1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: lambda_log_param" << '[' << i0__ << ']' << '[' << i1__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }

            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 148;
            current_statement_begin__ = 150;

            // model body

            current_statement_begin__ = 155;
            lp_accum__.add(normal_log<propto__>(lambda_mu, lambda_mu_mu, 2));
            current_statement_begin__ = 156;
            lp_accum__.add(normal_log<propto__>(lambda_sigma, 0, 2));
            current_statement_begin__ = 159;
            lp_accum__.add(normal_log<propto__>(exposure_rate, 0, 1));
            current_statement_begin__ = 160;
            lp_accum__.add(normal_log<propto__>(sum(exposure_rate), 0, (0.001 * S)));
            current_statement_begin__ = 162;
            lp_accum__.add(normal_log<propto__>(sigma_intercept, 0, 2));
            current_statement_begin__ = 163;
            lp_accum__.add(normal_log<propto__>(sigma_slope, 0, 2));
            current_statement_begin__ = 164;
            lp_accum__.add(normal_log<propto__>(sigma_sigma, 0, 2));
            current_statement_begin__ = 167;
            lp_accum__.add(exp_gamma_meanSd_lpdf<propto__>(to_vector(stan::model::rvalue(alpha, stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "alpha")), lambda_mu, lambda_sigma, pstream__));
            current_statement_begin__ = 168;
            if (as_bool(logical_gt(C,1))) {
                current_statement_begin__ = 168;
                lp_accum__.add(cauchy_log<propto__>(to_vector(stan::model::rvalue(alpha, stan::model::cons_list(stan::model::index_min_max(2, C), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "alpha")), 0, 2));
            }
            current_statement_begin__ = 170;
            lp_accum__.add(normal_log<propto__>(sigma_raw_param, add(multiply(sigma_slope,stan::model::rvalue(lambda_log_param, stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "lambda_log_param")),sigma_intercept), sigma_sigma));
            current_statement_begin__ = 173;
            lp_accum__.add(normal_log<propto__>(exposure_rate, 0, 1));
            current_statement_begin__ = 174;
            lp_accum__.add(normal_log<propto__>(sum(exposure_rate), 0, (0.001 * S)));
            current_statement_begin__ = 177;
            lp_accum__.add(sum(map_rect<1, lp_reduce_functor__>(global_parameters, get_reference_parameters_MPI(n_shards,M,G_per_shard,G_ind,lambda_log_param,sigma,exposure_rate, pstream__), real_data, counts_package, pstream__)));

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("lambda_mu");
        names__.push_back("lambda_sigma");
        names__.push_back("exposure_rate");
        names__.push_back("alpha");
        names__.push_back("sigma_raw_param");
        names__.push_back("sigma_slope");
        names__.push_back("sigma_intercept");
        names__.push_back("sigma_sigma");
        names__.push_back("sigma");
        names__.push_back("lambda_log_param");
        names__.push_back("counts_rng");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(S);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(C);
        dims__.push_back(G);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(G);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(G);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(S);
        dims__.push_back(G);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(S);
        dims__.push_back(G);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);
        static const char* function__ = "model_negBinomial_MPI_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double lambda_mu = in__.scalar_constrain();
        double lambda_sigma = in__.scalar_lb_constrain(0);
        vector_d exposure_rate = in__.vector_constrain(S);
        matrix_d alpha = in__.matrix_constrain(C,G);
        vector_d sigma_raw_param = in__.vector_constrain(G);
        double sigma_slope = in__.scalar_ub_constrain(0);
        double sigma_intercept = in__.scalar_constrain();
        double sigma_sigma = in__.scalar_lb_constrain(0);
        vars__.push_back(lambda_mu);
        vars__.push_back(lambda_sigma);
            for (int k_0__ = 0; k_0__ < S; ++k_0__) {
            vars__.push_back(exposure_rate[k_0__]);
            }
            for (int k_1__ = 0; k_1__ < G; ++k_1__) {
                for (int k_0__ = 0; k_0__ < C; ++k_0__) {
                vars__.push_back(alpha(k_0__, k_1__));
                }
            }
            for (int k_0__ = 0; k_0__ < G; ++k_0__) {
            vars__.push_back(sigma_raw_param[k_0__]);
            }
        vars__.push_back(sigma_slope);
        vars__.push_back(sigma_intercept);
        vars__.push_back(sigma_sigma);

        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            current_statement_begin__ = 148;
            validate_non_negative_index("sigma", "G", G);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  sigma(static_cast<Eigen::VectorXd::Index>(G));
            (void) sigma;  // dummy to suppress unused var warning

            stan::math::initialize(sigma, DUMMY_VAR__);
            stan::math::fill(sigma,DUMMY_VAR__);
            stan::math::assign(sigma,elt_divide(1.0,stan::math::exp(sigma_raw_param)));
            current_statement_begin__ = 150;
            validate_non_negative_index("lambda_log_param", "S", S);
            validate_non_negative_index("lambda_log_param", "G", G);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  lambda_log_param(static_cast<Eigen::VectorXd::Index>(S),static_cast<Eigen::VectorXd::Index>(G));
            (void) lambda_log_param;  // dummy to suppress unused var warning

            stan::math::initialize(lambda_log_param, DUMMY_VAR__);
            stan::math::fill(lambda_log_param,DUMMY_VAR__);
            stan::math::assign(lambda_log_param,multiply(X,alpha));



            // validate transformed parameters
            current_statement_begin__ = 148;
            current_statement_begin__ = 150;

            // write transformed parameters
            if (include_tparams__) {
            for (int k_0__ = 0; k_0__ < G; ++k_0__) {
            vars__.push_back(sigma[k_0__]);
            }
            for (int k_1__ = 0; k_1__ < G; ++k_1__) {
                for (int k_0__ = 0; k_0__ < S; ++k_0__) {
                vars__.push_back(lambda_log_param(k_0__, k_1__));
                }
            }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 196;
            validate_non_negative_index("counts_rng", "G", G);
            validate_non_negative_index("counts_rng", "S", S);
            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> > counts_rng(S, (Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(G))));
            stan::math::initialize(counts_rng, DUMMY_VAR__);
            stan::math::fill(counts_rng,DUMMY_VAR__);


            current_statement_begin__ = 198;
            for (int g = 1; g <= G; ++g) {
                current_statement_begin__ = 198;
                for (int s = 1; s <= S; ++s) {
                    current_statement_begin__ = 199;
                    stan::model::assign(counts_rng, 
                                stan::model::cons_list(stan::model::index_uni(s), stan::model::cons_list(stan::model::index_uni(g), stan::model::nil_index_list())), 
                                neg_binomial_2_log_rng((get_base1(exposure_rate,s,"exposure_rate",1) + get_base1(lambda_log_param,s,g,"lambda_log_param",1)),get_base1(sigma,g,"sigma",1), base_rng__), 
                                "assigning variable counts_rng");
                }
            }

            // validate generated quantities
            current_statement_begin__ = 196;

            // write generated quantities
            for (int k_1__ = 0; k_1__ < G; ++k_1__) {
                for (int k_0__ = 0; k_0__ < S; ++k_0__) {
                vars__.push_back(counts_rng[k_0__][k_1__]);
                }
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_negBinomial_MPI";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "lambda_mu";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "lambda_sigma";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= S; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "exposure_rate" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= G; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= C; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "alpha" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= G; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_raw_param" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_slope";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_intercept";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_sigma";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            for (int k_0__ = 1; k_0__ <= G; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "sigma" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_1__ = 1; k_1__ <= G; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= S; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "lambda_log_param" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }


        if (!include_gqs__) return;
        for (int k_1__ = 1; k_1__ <= G; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= S; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "counts_rng" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "lambda_mu";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "lambda_sigma";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= S; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "exposure_rate" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= G; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= C; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "alpha" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= G; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_raw_param" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_slope";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_intercept";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_sigma";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            for (int k_0__ = 1; k_0__ <= G; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "sigma" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_1__ = 1; k_1__ <= G; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= S; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "lambda_log_param" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }


        if (!include_gqs__) return;
        for (int k_1__ = 1; k_1__ <= G; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= S; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "counts_rng" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }

}; // model

}

typedef model_negBinomial_MPI_namespace::model_negBinomial_MPI stan_model;

STAN_REGISTER_MAP_RECT(1, model_negBinomial_MPI_namespace::lp_reduce_functor__)

#endif
