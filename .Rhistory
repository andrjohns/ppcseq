debugonce(ppc_seq)
library(ppcSeq)
ppcSeq::counts %>% mutate(is_significant = FDR < 0.05) %>% ppc_seq(formula = ~ Label + W, significance_column = "PValue", do_check_column = "is_significant", value_column = "value")
#input = c(as.list(environment()))
cores = 30/3 %>% floor
shards = cores * 2
my_theme =
theme_bw() +
theme(
panel.border = element_blank(),
axis.line = element_line(),
panel.grid.major = element_line(size = 0.2),
panel.grid.minor = element_line(size = 0.1),
text = element_text(size=12),
legend.position="bottom",
aspect.ratio=1,
axis.text.x = element_text(angle = 90, hjust = 1),
strip.background = element_blank(),
axis.title.x  = element_text(margin = margin(t = 10, r = 10, b = 10, l = 10)),
axis.title.y  = element_text(margin = margin(t = 10, r = 10, b = 10, l = 10))
)
if(input.df %>% filter(!!as.symbol(gene_column) %>% is.na) %>% nrow > 0) stop("There are NAs in the gene_column. Please filter those records")
if(input.df %>% select(!!value_column) %>% sapply(class) != "integer") stop("The algorithm takes raw (un-normalised) integer read counts only")
# distinct_at is not released yet for dplyr, thus we have to use this trick
my_df <- input.df %>%
# Select only significant genes plus background
{
bind_rows(
# Genes to check
(.) %>%
filter((!!as.symbol(do_check_column))),
# Least changing genes
(.) %>%
filter((!!as.symbol(do_check_column)) %>% `!`) %>%
inner_join(
(.) %>%
select(!!gene_column) %>%
distinct() %>%
arrange(!!significance_column) %>% tail(1000)
)
)
} %>%
select(!!gene_column, !!sample_column, !!value_column, one_of(parse_formula(formula)), !!do_check_column) %>%
setNames(c("symbol", "sample", "read count", parse_formula(formula), do_check_column)) %>%
distinct() %>%
# Add symbol idx
left_join(
(.) %>%
distinct(symbol) %>%
mutate(G = 1:n())
) %>%
# Add sample indeces
mutate(S = factor(sample, levels = .$sample %>% unique) %>% as.integer)
how_many_to_check = input.df %>% filter(!!as.symbol(do_check_column)) %>% select(!!gene_column) %>% distinct() %>% nrow
# Create design matrix
X =
model.matrix(
object = formula,
data = my_df %>% select(sample, one_of(parse_formula(formula))) %>% distinct %>% arrange(sample)
)
C = X %>% ncol
counts_MPI =
my_df %>%
select(symbol, sample, `read count`, S, G) %>%
format_for_MPI(shards)
G = counts_MPI %>% distinct(G) %>% nrow()
S = counts_MPI %>% distinct(sample) %>% nrow()
N = counts_MPI %>% distinct(idx_MPI, `read count`, `read count MPI row`) %>%  count(idx_MPI) %>% summarise(max(n)) %>% pull(1)
M = counts_MPI %>% distinct(start, idx_MPI) %>% count(idx_MPI) %>% pull(n) %>% max
G_per_shard = counts_MPI %>% distinct(symbol, idx_MPI) %>% count(idx_MPI) %>% pull(n) %>% as.array
# distinct_at is not released yet for dplyr, thus we have to use this trick
my_df <- input.df %>%
# Select only significant genes plus background
{
bind_rows(
# Genes to check
(.) %>%
filter((!!as.symbol(do_check_column))),
# Least changing genes
(.) %>%
filter((!!as.symbol(do_check_column)) %>% `!`) %>%
inner_join(
(.) %>%
arrange(!!significance_column) %>%
select(!!gene_column) %>%
distinct() %>%
tail(1000)
)
)
} %>%
select(!!gene_column, !!sample_column, !!value_column, one_of(parse_formula(formula)), !!do_check_column) %>%
setNames(c("symbol", "sample", "read count", parse_formula(formula), do_check_column)) %>%
distinct() %>%
# Add symbol idx
left_join(
(.) %>%
distinct(symbol) %>%
mutate(G = 1:n())
) %>%
# Add sample indeces
mutate(S = factor(sample, levels = .$sample %>% unique) %>% as.integer)
input.df %>%
# Select only significant genes plus background
{
bind_rows(
# Genes to check
(.) %>%
filter((!!as.symbol(do_check_column))),
# Least changing genes
(.) %>%
filter((!!as.symbol(do_check_column)) %>% `!`) %>%
inner_join(
(.) %>%
arrange(!!significance_column) %>%
select(!!gene_column) %>%
distinct() %>%
tail(1000)
)
)
}
input.df %>%
filter((!!as.symbol(do_check_column)) %>% `!`) %>%
inner_join(
(.) %>%
arrange(!!significance_column) %>%
select(!!gene_column) %>%
distinct() %>%
tail(1000)
)
input.df %>%
filter((!!as.symbol(do_check_column)) %>% `!`)
input.df %>%
filter((!!as.symbol(do_check_column)) %>% `!`) %>%
arrange(!!significance_column) %>%
select(!!gene_column) %>%
distinct() %>%
tail(1000)
input.df %>%
filter((!!as.symbol(do_check_column)) %>% `!`) %>%
arrange(!!significance_column)
input.df %>%
filter((!!as.symbol(do_check_column)) %>% `!`) %>%
arrange(!!as.symbol(significance_column))
input.df %>%
# Select only significant genes plus background
{
bind_rows(
# Genes to check
(.) %>%
filter((!!as.symbol(do_check_column))),
# Least changing genes
(.) %>%
filter((!!as.symbol(do_check_column)) %>% `!`) %>%
inner_join(
(.) %>%
arrange(!!as.symbol(significance_column)) %>%
select(!!gene_column) %>%
distinct() %>%
tail(1000)
)
)
}
# distinct_at is not released yet for dplyr, thus we have to use this trick
my_df <- input.df %>%
# Select only significant genes plus background
{
bind_rows(
# Genes to check
(.) %>%
filter((!!as.symbol(do_check_column))),
# Least changing genes
(.) %>%
filter((!!as.symbol(do_check_column)) %>% `!`) %>%
inner_join(
(.) %>%
arrange(!!as.symbol(significance_column)) %>%
select(!!gene_column) %>%
distinct() %>%
tail(1000)
)
)
} %>%
select(!!gene_column, !!sample_column, !!value_column, one_of(parse_formula(formula)), !!do_check_column) %>%
setNames(c("symbol", "sample", "read count", parse_formula(formula), do_check_column)) %>%
distinct() %>%
# Add symbol idx
left_join(
(.) %>%
distinct(symbol) %>%
mutate(G = 1:n())
) %>%
# Add sample indeces
mutate(S = factor(sample, levels = .$sample %>% unique) %>% as.integer)
how_many_to_check = input.df %>% filter(!!as.symbol(do_check_column)) %>% select(!!gene_column) %>% distinct() %>% nrow
# Create design matrix
X =
model.matrix(
object = formula,
data = my_df %>% select(sample, one_of(parse_formula(formula))) %>% distinct %>% arrange(sample)
)
C = X %>% ncol
counts_MPI =
my_df %>%
select(symbol, sample, `read count`, S, G) %>%
format_for_MPI(shards)
G = counts_MPI %>% distinct(G) %>% nrow()
S = counts_MPI %>% distinct(sample) %>% nrow()
N = counts_MPI %>% distinct(idx_MPI, `read count`, `read count MPI row`) %>%  count(idx_MPI) %>% summarise(max(n)) %>% pull(1)
M = counts_MPI %>% distinct(start, idx_MPI) %>% count(idx_MPI) %>% pull(n) %>% max
G_per_shard = counts_MPI %>% distinct(symbol, idx_MPI) %>% count(idx_MPI) %>% pull(n) %>% as.array
n_shards = min(shards, counts_MPI %>% distinct(idx_MPI) %>% nrow)
G_per_shard_idx = c(0, counts_MPI %>% distinct(symbol, idx_MPI) %>% count(idx_MPI) %>% pull(n) %>% cumsum)
counts =
counts_MPI %>%
distinct(idx_MPI, `read count`, `read count MPI row`)  %>%
spread(idx_MPI,  `read count`) %>%
select(-`read count MPI row`) %>%
replace(is.na(.), 0 %>% as.integer) %>%
as_matrix() %>% t
sample_idx =
counts_MPI %>%
distinct(idx_MPI, S, `read count MPI row`)  %>%
spread(idx_MPI, S) %>%
select(-`read count MPI row`) %>%
replace(is.na(.), 0 %>% as.integer) %>%
as_matrix() %>% t
symbol_end =
counts_MPI %>%
distinct(idx_MPI, end, `symbol MPI row`)  %>%
spread(idx_MPI, end) %>%
bind_rows( (.) %>% head(n=1) %>%  mutate_all(function(x) {0}) ) %>%
arrange(`symbol MPI row`) %>%
select(-`symbol MPI row`) %>%
replace(is.na(.), 0 %>% as.integer) %>%
as_matrix() %>% t
G_ind =
counts_MPI %>%
distinct(idx_MPI, G, `symbol MPI row`)  %>%
spread(idx_MPI, G) %>%
arrange(`symbol MPI row`) %>%
select(-`symbol MPI row`) %>%
replace(is.na(.), 0 %>% as.integer) %>%
as_matrix() %>% t
counts_package =
# Dimensions data sets
rep(c(M, N, S), shards) %>%
matrix(nrow = shards, byrow = T) %>%
cbind(G_per_shard) %>%
cbind(symbol_end) %>%
cbind(sample_idx) %>%
cbind(counts)
CP = ncol(counts_package)
lambda_mu_mu = 5.612671
fileConn<-file("~/.R/Makevars")
writeLines(c( "CXX14FLAGS += -O3","CXX14FLAGS += -DSTAN_THREADS", "CXX14FLAGS += -pthread"), fileConn)
close(fileConn)
pcc_seq_model = stan_model("inst/stan/negBinomial_MPI.stan")
Sys.setenv("STAN_NUM_THREADS" = cores)
fit = 	vb(
pcc_seq_model, #
output_samples=1000,
iter = 50000,
tol_rel_obj=0.005
)
input.df %>% distinct(sample, value, symbol) %>% ggplot(aes(value, group=sample)) + geom_density()
input.df %>% distinct(sample, value, symbol) %>% ggplot(aes(value, group=sample)) + geom_density() + scale_x_log10()
fileConn<-file("~/.R/Makevars")
writeLines(c( "CXX14FLAGS += -O3","CXX14FLAGS += -DSTAN_THREADS", "CXX14FLAGS += -pthread"), fileConn)
close(fileConn)
pcc_seq_model = stan_model("inst/stan/negBinomial_MPI.stan")
Sys.setenv("STAN_NUM_THREADS" = cores)
fit = 	vb(
pcc_seq_model, #
output_samples=1000,
iter = 50000,
tol_rel_obj=0.005
)
fileConn<-file("~/.R/Makevars")
writeLines(c( "CXX14FLAGS += -O3","CXX14FLAGS += -DSTAN_THREADS", "CXX14FLAGS += -pthread"), fileConn)
close(fileConn)
pcc_seq_model = stan_model("inst/stan/negBinomial_MPI.stan")
Sys.setenv("STAN_NUM_THREADS" = cores)
fit = 	vb(
pcc_seq_model, #
output_samples=1000,
iter = 50000,
tol_rel_obj=0.005
)
fileConn<-file("~/.R/Makevars")
writeLines(c( "CXX14FLAGS += -O3","CXX14FLAGS += -DSTAN_THREADS", "CXX14FLAGS += -pthread"), fileConn)
close(fileConn)
pcc_seq_model = stan_model("inst/stan/negBinomial_MPI.stan")
Sys.setenv("STAN_NUM_THREADS" = cores)
fit = 	vb(
pcc_seq_model, #
output_samples=1000,
iter = 50000,
tol_rel_obj=0.005
)
pcc_seq_model
fileConn<-file("~/.R/Makevars")
writeLines(c( "CXX14FLAGS += -O3","CXX14FLAGS += -DSTAN_THREADS", "CXX14FLAGS += -pthread"), fileConn)
close(fileConn)
pcc_seq_model = stan_model("inst/stan/negBinomial_MPI.stan")
Sys.setenv("STAN_NUM_THREADS" = cores)
fit = 	vb(
pcc_seq_model, #
output_samples=1000,
iter = 50000,
tol_rel_obj=0.005
)
fileConn<-file("~/.R/Makevars")
writeLines(c( "CXX14FLAGS += -O3","CXX14FLAGS += -DSTAN_THREADS", "CXX14FLAGS += -pthread"), fileConn)
close(fileConn)
pcc_seq_model = stan_model("inst/stan/negBinomial_MPI.stan")
Sys.setenv("STAN_NUM_THREADS" = cores)
fit = 	vb(
pcc_seq_model, #
output_samples=1000,
iter = 50000,
tol_rel_obj=0.005
)
pcc_seq_model
fileConn<-file("~/.R/Makevars")
writeLines(c( "CXX14FLAGS += -O3","CXX14FLAGS += -DSTAN_THREADS", "CXX14FLAGS += -pthread"), fileConn)
close(fileConn)
pcc_seq_model = stan_model("inst/stan/negBinomial_MPI.stan")
Sys.setenv("STAN_NUM_THREADS" = cores)
fit = 	sampling(
stanmodels$negBinomial_MPI, #pcc_seq_model, #
chains=3, cores=3,
iter=600, warmup=500,   save_warmup = FALSE
)
debugonce(ppc_seq)
ppcSeq::counts %>% mutate(is_significant = FDR < 0.05) %>% ppc_seq(formula = ~ Label + W, significance_column = "PValue", do_check_column = "is_significant", value_column = "value")
#input = c(as.list(environment()))
cores = 30/3 %>% floor
shards = cores * 2
my_theme =
theme_bw() +
theme(
panel.border = element_blank(),
axis.line = element_line(),
panel.grid.major = element_line(size = 0.2),
panel.grid.minor = element_line(size = 0.1),
text = element_text(size=12),
legend.position="bottom",
aspect.ratio=1,
axis.text.x = element_text(angle = 90, hjust = 1),
strip.background = element_blank(),
axis.title.x  = element_text(margin = margin(t = 10, r = 10, b = 10, l = 10)),
axis.title.y  = element_text(margin = margin(t = 10, r = 10, b = 10, l = 10))
)
if(input.df %>% filter(!!as.symbol(gene_column) %>% is.na) %>% nrow > 0) stop("There are NAs in the gene_column. Please filter those records")
if(input.df %>% select(!!value_column) %>% sapply(class) != "integer") stop("The algorithm takes raw (un-normalised) integer read counts only")
# distinct_at is not released yet for dplyr, thus we have to use this trick
my_df <- input.df %>%
# Select only significant genes plus background
{
bind_rows(
# Genes to check
(.) %>%
filter((!!as.symbol(do_check_column))),
# Least changing genes
(.) %>%
filter((!!as.symbol(do_check_column)) %>% `!`) %>%
inner_join(
(.) %>%
arrange(!!as.symbol(significance_column)) %>%
select(!!gene_column) %>%
distinct() %>%
tail(1000)
)
)
} %>%
select(!!gene_column, !!sample_column, !!value_column, one_of(parse_formula(formula)), !!do_check_column) %>%
setNames(c("symbol", "sample", "read count", parse_formula(formula), do_check_column)) %>%
distinct() %>%
# Add symbol idx
left_join(
(.) %>%
distinct(symbol) %>%
mutate(G = 1:n())
) %>%
# Add sample indeces
mutate(S = factor(sample, levels = .$sample %>% unique) %>% as.integer)
how_many_to_check = input.df %>% filter(!!as.symbol(do_check_column)) %>% select(!!gene_column) %>% distinct() %>% nrow
# Create design matrix
X =
model.matrix(
object = formula,
data = my_df %>% select(sample, one_of(parse_formula(formula))) %>% distinct %>% arrange(sample)
)
C = X %>% ncol
counts_MPI =
my_df %>%
select(symbol, sample, `read count`, S, G) %>%
format_for_MPI(shards)
G = counts_MPI %>% distinct(G) %>% nrow()
S = counts_MPI %>% distinct(sample) %>% nrow()
N = counts_MPI %>% distinct(idx_MPI, `read count`, `read count MPI row`) %>%  count(idx_MPI) %>% summarise(max(n)) %>% pull(1)
M = counts_MPI %>% distinct(start, idx_MPI) %>% count(idx_MPI) %>% pull(n) %>% max
G_per_shard = counts_MPI %>% distinct(symbol, idx_MPI) %>% count(idx_MPI) %>% pull(n) %>% as.array
n_shards = min(shards, counts_MPI %>% distinct(idx_MPI) %>% nrow)
G_per_shard_idx = c(0, counts_MPI %>% distinct(symbol, idx_MPI) %>% count(idx_MPI) %>% pull(n) %>% cumsum)
counts =
counts_MPI %>%
distinct(idx_MPI, `read count`, `read count MPI row`)  %>%
spread(idx_MPI,  `read count`) %>%
select(-`read count MPI row`) %>%
replace(is.na(.), 0 %>% as.integer) %>%
as_matrix() %>% t
sample_idx =
counts_MPI %>%
distinct(idx_MPI, S, `read count MPI row`)  %>%
spread(idx_MPI, S) %>%
select(-`read count MPI row`) %>%
replace(is.na(.), 0 %>% as.integer) %>%
as_matrix() %>% t
symbol_end =
counts_MPI %>%
distinct(idx_MPI, end, `symbol MPI row`)  %>%
spread(idx_MPI, end) %>%
bind_rows( (.) %>% head(n=1) %>%  mutate_all(function(x) {0}) ) %>%
arrange(`symbol MPI row`) %>%
select(-`symbol MPI row`) %>%
replace(is.na(.), 0 %>% as.integer) %>%
as_matrix() %>% t
G_ind =
counts_MPI %>%
distinct(idx_MPI, G, `symbol MPI row`)  %>%
spread(idx_MPI, G) %>%
arrange(`symbol MPI row`) %>%
select(-`symbol MPI row`) %>%
replace(is.na(.), 0 %>% as.integer) %>%
as_matrix() %>% t
counts_package =
# Dimensions data sets
rep(c(M, N, S), shards) %>%
matrix(nrow = shards, byrow = T) %>%
cbind(G_per_shard) %>%
cbind(symbol_end) %>%
cbind(sample_idx) %>%
cbind(counts)
CP = ncol(counts_package)
lambda_mu_mu = 5.612671
Sys.setenv("STAN_NUM_THREADS" = cores)
fileConn<-file("~/.R/Makevars")
writeLines(c( "CXX14FLAGS += -O3","CXX14FLAGS += -DSTAN_THREADS", "CXX14FLAGS += -pthread"), fileConn)
close(fileConn)
pcc_seq_model = stan_model("inst/stan/negBinomial_MPI.stan")
fit = sampling(
stanmodels$negBinomial_MPI, #pcc_seq_model, #
chains=3, cores=3,
iter=600, warmup=500,   save_warmup = FALSE
)
fit = sampling(
pcc_seq_model, #
chains=3, cores=3,
iter=600, warmup=500,   save_warmup = FALSE
)
how_many_to_check
G
fileConn<-file("~/.R/Makevars")
writeLines(c( "CXX14FLAGS += -O3","CXX14FLAGS += -DSTAN_THREADS", "CXX14FLAGS += -pthread"), fileConn)
close(fileConn)
pcc_seq_model = stan_model("inst/stan/negBinomial_MPI.stan")
fit = sampling(
pcc_seq_model, #
chains=3, cores=3,
iter=600, warmup=500,   save_warmup = FALSE
)
fileConn<-file("~/.R/Makevars")
writeLines(c( "CXX14FLAGS += -O3","CXX14FLAGS += -DSTAN_THREADS", "CXX14FLAGS += -pthread"), fileConn)
close(fileConn)
pcc_seq_model = stan_model("inst/stan/negBinomial_MPI.stan")
fit = sampling(
pcc_seq_model, #
chains=3, cores=3,
iter=600, warmup=500,   save_warmup = FALSE
)
C
C-2
fileConn<-file("~/.R/Makevars")
writeLines(c( "CXX14FLAGS += -O3","CXX14FLAGS += -DSTAN_THREADS", "CXX14FLAGS += -pthread"), fileConn)
close(fileConn)
pcc_seq_model = stan_model("inst/stan/negBinomial_MPI.stan")
fit = sampling(
pcc_seq_model, #
chains=3, cores=3,
iter=600, warmup=500,   save_warmup = FALSE
)
fileConn<-file("~/.R/Makevars")
writeLines(c( "CXX14FLAGS += -O3","CXX14FLAGS += -DSTAN_THREADS", "CXX14FLAGS += -pthread"), fileConn)
close(fileConn)
pcc_seq_model = stan_model("inst/stan/negBinomial_MPI.stan")
fit = 	vb(
stanmodels$negBinomial_MPI, #pcc_seq_model, #
output_samples=1000,
iter = 50000,
tol_rel_obj=0.005
)
fileConn<-file("~/.R/Makevars")
writeLines(c( "CXX14FLAGS += -O3","CXX14FLAGS += -DSTAN_THREADS", "CXX14FLAGS += -pthread"), fileConn)
close(fileConn)
pcc_seq_model = stan_model("inst/stan/negBinomial_MPI.stan")
fit = 	vb(
pcc_seq_model, #
output_samples=1000,
iter = 50000,
tol_rel_obj=0.005
)
