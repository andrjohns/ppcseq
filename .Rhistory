es = readRDS("dev/es_calibration_false_negative.rds")
stats =
es %>%
mutate(
inference = map(inference, ~ .x %>% select(symbol, `ppc samples failed`)) # unnest(`sample wise data`) %>% select(symbol, sample, ppc))
) %>%
mutate(`data source` = map(`data source`, ~ .x  %>% filter(is_significant) %>% distinct(symbol, is_symbol_outlier))) %>%
mutate(integrated = map2(inference, `data source`, ~ .x %>% left_join(.y))) %>%
select(-`data source` , -  inference) %>%
unnest(integrated)
library(tidyverse)
library(magrittr)
library(ppcSeq)
stats =
es %>%
mutate(
inference = map(inference, ~ .x %>% select(symbol, `ppc samples failed`)) # unnest(`sample wise data`) %>% select(symbol, sample, ppc))
) %>%
mutate(`data source` = map(`data source`, ~ .x  %>% filter(is_significant) %>% distinct(symbol, is_symbol_outlier))) %>%
mutate(integrated = map2(inference, `data source`, ~ .x %>% left_join(.y))) %>%
select(-`data source` , -  inference) %>%
unnest(integrated)
# Where the data does not have outliers
fp_stat =
stats %>%
filter(is_symbol_outlier == 1) %>%
mutate(false_positive =   `ppc samples failed` > 0 ) %>%
mutate(true_negative =  `ppc samples failed` == 0) %>%
group_by(fp, run) %>%
summarise(sum(false_positive), sum(true_negative)) %>%
mutate(`false positive predicted` = `sum(false_positive)` / (`sum(false_positive)` + `sum(true_negative)`))
p1 =
fp_stat %>%
ggplot(aes(x = fp/100, y = `false positive predicted` )) +
geom_smooth(method = "lm", color = "#4b68b1") +
geom_point() +
#geom_abline(intercept = 0, slope = 1, linetype ="dashed") +
xlab("False positive aimed") +
ylab("False positive predicted") +
my_theme
my_theme =
theme_bw() +
theme(
panel.border = element_blank(),
axis.line = element_line(),
panel.grid.major = element_line(size = 0.2),
panel.grid.minor = element_line(size = 0.1),
text = element_text(size=12),
legend.position="bottom",
aspect.ratio=1,
strip.background = element_blank(),
axis.title.x  = element_text(margin = margin(t = 10, r = 10, b = 10, l = 10)),
axis.title.y  = element_text(margin = margin(t = 10, r = 10, b = 10, l = 10))
)
p1 =
fp_stat %>%
ggplot(aes(x = fp/100, y = `false positive predicted` )) +
geom_smooth(method = "lm", color = "#4b68b1") +
geom_point() +
#geom_abline(intercept = 0, slope = 1, linetype ="dashed") +
xlab("False positive aimed") +
ylab("False positive predicted") +
my_theme
fn_stat =
stats %>%
filter(is_symbol_outlier > 1) %>%
mutate(true_positive =   `ppc samples failed` > 0 ) %>%
mutate(false_negative =  `ppc samples failed` == 0) %>%
group_by(fp, run) %>%
summarise(sum(true_positive), sum(false_negative)) %>%
mutate(`false negative predicted` = `sum(false_negative)` / (`sum(false_negative)` + `sum(true_positive)`))
p2 =
fn_stat %>%
ggplot(aes(x = fp / 100, y = `false negative predicted` )) + geom_point()  +
geom_abline(intercept = 0, slope = 1) +
xlab("False positive aimed") +
ylab("False negative predicted") +
my_theme
# ROC
p3 =
tibble(
`false positive predicted` = fp_stat %>% pull(`false positive predicted`) %>% sort,
`false negative predicted` = fn_stat %>% pull(`false negative predicted`) %>% sort,
) %>%
ggplot(aes(y = `false negative predicted`, x = `false positive predicted`)) +
geom_line() +
xlab("False positive predicted") +
ylab("False negative predicted") +
my_theme
# Compose plots
cowplot::plot_grid(plotlist = list(p1, p2, p3), align = "v", ncol = 3, axis="b", rel_widths = 1 ) %>%
# Save plots
ggsave(
"dev/fp_fn_ROC.pdf",
plot = .,
useDingbats=FALSE,
units = c("mm"),
width = 183
)
cowplot::plot_grid(plotlist = list(p1, p2, p3), align = "v", ncol = 3, axis="b", rel_widths = 1 )
stats %>%
filter(is_symbol_outlier > 1) %>%
mutate(true_positive =   `ppc samples failed` > 0 ) %>%
mutate(false_negative =  `ppc samples failed` == 0)
stats %>%
filter(is_symbol_outlier > 1) %>%
mutate(true_positive =   `ppc samples failed` > 0 ) %>%
mutate(false_negative =  `ppc samples failed` == 0) %>% distinct(fp, run)
stats %>%
filter(is_symbol_outlier > 1) %>%
mutate(true_positive =   `ppc samples failed` > 0 ) %>%
mutate(false_negative =  `ppc samples failed` == 0) %>% distinct(fp, run) %>% filter(fp==0.2)
sample(1, 1:99999)
sample(1:99999, size = 1)
