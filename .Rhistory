ceiling
)
)
}
#' Formula parser
#'
#' @param fm A formula
#' @return A character vector
#'
#'
parse_formula <- function(fm) {
if(attr(terms(fm), "response") == 1) stop("The formula must be of the kind \"~ covariates\" ")
else as.character(attr(terms(fm), "variables"))[-1]
}
#' Get matrix from tibble
#'
#' @import dplyr
#' @import tidyr
#' @importFrom magrittr set_rownames
#'
#' @param tbl A tibble
#' @param rownames A character string of the rownames
#' @return A matrix
as_matrix <- function(tbl, rownames = NULL) {
tbl %>%
# Check if data frame is not numerical beside the rownames column (if present)
{
if (
tbl %>% {
if (!is.null(rownames)) (.) %>% dplyr::select(-contains(rownames)) else (.)
} %>%
dplyr::summarise_all(class) %>%
tidyr::gather(variable, class) %>%
pull(class) %>%
unique() %>%
`%in%`(c("numeric", "integer")) %>% `!`() %>% any()
# identical("numeric")
) {
warning("to_matrix says: there are NON-numerical columns, the matrix will NOT be numerical")
}
(.)
} %>%
as.data.frame() %>%
# Deal with rownames column if present
{
if (!is.null(rownames)) {
(.) %>%
magrittr::set_rownames(tbl %>% pull(!!rownames)) %>%
dplyr::select(-!!rownames)
} else {
(.)
}
} %>%
# Convert to matrix
as.matrix()
}
# distinct_at is not released yet for dplyr, thus we have to use this trick
my_df <- input.df %>%
select(!!gene_column, !!sample_column, !!value_column, one_of(parse_formula(formula))) %>%
setNames(c("symbol", "sample", "read count", parse_formula(formula))) %>%
distinct() %>%
# Add symbol idx
left_join(
(.) %>%
distinct(symbol) %>%
mutate(G = 1:n())
) %>%
# Add sample indeces
mutate(S = factor(sample, levels = .$sample %>% unique) %>% as.integer)
counts_MPI =
my_df %>%
select(symbol, sample, `read count`, S, G) %>%
format_for_MPI(shards)
G = counts_MPI %>% distinct(G) %>% nrow()
S = counts_MPI %>% distinct(sample) %>% nrow()
N = counts_MPI %>% distinct(idx_MPI, `read count`, `read count MPI row`) %>%  count(idx_MPI) %>% summarise(max(n)) %>% pull(1)
M = counts_MPI %>% distinct(start, idx_MPI) %>% count(idx_MPI) %>% pull(n) %>% max
G_per_shard = counts_MPI %>% distinct(symbol, idx_MPI) %>% count(idx_MPI) %>% pull(n) %>% as.array
n_shards = min(shards, counts_MPI %>% distinct(idx_MPI) %>% nrow)
G_per_shard_idx = c(0, counts_MPI %>% distinct(symbol, idx_MPI) %>% count(idx_MPI) %>% pull(n) %>% cumsum)
counts =
counts_MPI %>%
distinct(idx_MPI, `read count`, `read count MPI row`)  %>%
spread(idx_MPI,  `read count`) %>%
select(-`read count MPI row`) %>%
replace(is.na(.), 0 %>% as.integer) %>%
as_matrix() %>% t
sample_idx =
counts_MPI %>%
distinct(idx_MPI, S, `read count MPI row`)  %>%
spread(idx_MPI, S) %>%
select(-`read count MPI row`) %>%
replace(is.na(.), 0 %>% as.integer) %>%
as_matrix() %>% t
symbol_end =
counts_MPI %>%
distinct(idx_MPI, end, `symbol MPI row`)  %>%
spread(idx_MPI, end) %>%
bind_rows( (.) %>% head(n=1) %>%  mutate_all(function(x) {0}) ) %>%
arrange(`symbol MPI row`) %>%
select(-`symbol MPI row`) %>%
replace(is.na(.), 0 %>% as.integer) %>%
as_matrix() %>% t
G_ind =
counts_MPI %>%
distinct(idx_MPI, G, `symbol MPI row`)  %>%
spread(idx_MPI, G) %>%
arrange(`symbol MPI row`) %>%
select(-`symbol MPI row`) %>%
replace(is.na(.), 0 %>% as.integer) %>%
as_matrix() %>% t
counts_package =
# Dimensions data sets
rep(c(M, N, S), shards) %>%
matrix(nrow = shards, byrow = T) %>%
cbind(G_per_shard) %>%
cbind(symbol_end) %>%
cbind(sample_idx) %>%
cbind(counts)
CP = ncol(counts_package)
########################################
# Prior info
lambda_mu_mu = 5.612671
########################################
# MODEL
fileConn<-file("~/.R/Makevars")
writeLines(c( "CXX14FLAGS += -O3","CXX14FLAGS += -DSTAN_THREADS", "CXX14FLAGS += -pthread"), fileConn)
close(fileConn)
Sys.setenv("STAN_NUM_THREADS" = cores)
pcc_seq_model = stan_model("inst/stan/negBinomial_MPI.stan")
shards
Sys.time() %>% print
fit =
sampling(
pcc_seq_model, #stanmodels$pcc_seq,
chains=3, cores=3,
iter=400, warmup=400-100,   save_warmup = FALSE
)
Sys.time() %>% print
fileConn<-file("~/.R/Makevars")
writeLines(c( "CXX14FLAGS += -O3","CXX14FLAGS += -DSTAN_THREADS", "CXX14FLAGS += -pthread"), fileConn)
close(fileConn)
Sys.setenv("STAN_NUM_THREADS" = cores)
pcc_seq_model = stan_model("inst/stan/negBinomial_MPI.stan")
Sys.time() %>% print
fit =
sampling(
pcc_seq_model, #stanmodels$pcc_seq,
chains=3, cores=3,
iter=400, warmup=400-100,   save_warmup = FALSE
)
Sys.time() %>% print
fit %>%
tidybayes::spread_draws(lambda_log_param, sigma_raw)
fit %>%
tidybayes::spread_draws(lambda_log_param, sigma_raw)
fit %>% summary %$% summary
library(magrittr)
fit %>% summary %$% summary
fit %>%
tidybayes::spread_draws(lambda_log_param[G], sigma_raw[G])
fit %>%
tidybayes::spread_draws(lambda_log_param[G], sigma_raw_param[G])
fit %>%
tidybayes::spread_draws(lambda_log_param[G], sigma_raw_param[G]) %>%
ggplot(aes(x=lambda_log_param, y=sigma_raw_param, group=G)) +
stat_ellipse()
fit %>%
tidybayes::spread_draws(lambda_log_param[G], sigma_raw_param[G]) %>%
ggplot(aes(x=lambda_log_param, y=sigma_raw_param, group=G)) +
stat_ellipse() +
my_theme
fit %>%
tidybayes::spread_draws(lambda_log_param[G], sigma_raw_param[G]) %>%
ggplot(aes(x=lambda_log_param, y=sigma_raw_param, group=G)) +
stat_ellipse(fill="grey") +
my_theme
fit %>%
tidybayes::spread_draws(lambda_log_param[G], sigma_raw_param[G]) %>%
ggplot(aes(x=lambda_log_param, y=sigma_raw_param, group=G)) +
stat_ellipse(geom = "polygon") +
my_theme
fit %>%
tidybayes::spread_draws(lambda_log_param[G], sigma_raw_param[G]) %>%
ggplot(aes(x=lambda_log_param, y=sigma_raw_param, group=G)) +
stat_ellipse(geom = "polygon", alpha=0.2) +
my_theme
fit %>%
tidybayes::spread_draws(lambda_log_param[G], sigma_raw_param[G]) %>%
tidybayes::median_qi() %>%
ggplot(aes(x=lambda_log_param, y=sigma_raw_param, group=G)) +
stat_point() +
my_theme
fit %>%
tidybayes::spread_draws(lambda_log_param[G], sigma_raw_param[G]) %>%
tidybayes::median_qi() %>%
ggplot(aes(x=lambda_log_param, y=sigma_raw_param, group=G)) +
geom_point() +
my_theme
# Relation expected value, variance
fit %>%
tidybayes::spread_draws(lambda_log_param[G], sigma_raw_param[G]) %>%
ggplot(aes(x=lambda_log_param, y=sigma_raw_param, group=G)) +
stat_ellipse(geom = "polygon", alpha=0.2) +
my_theme
fit %>%
tidybayes::spread_draws(lambda_log_param[G], sigma_raw_param[G]) %>%
ggplot(aes(x=lambda_log_param, y=sigma_raw_param, group=G)) +
geom_point() +
my_theme
fit %>%
tidybayes::spread_draws(lambda_log_param[G], sigma_raw_param[G]) %>%
ggplot(aes(x=lambda_log_param, y=sigma_raw_param, color=G)) +
geom_point() +
my_theme
fit %>%
tidybayes::spread_draws(lambda_log_param[G], sigma_raw_param[G]) %>%
ggplot(aes(x=lambda_log_param, y=sigma_raw_param, color=G %>% factor)) +
geom_point() +
my_theme
# Relation expected value, variance
fit %>%
tidybayes::spread_draws(lambda_log_param[G], sigma_raw_param[G]) %>%
ggplot(aes(x=lambda_log_param, y=sigma_raw_param, group=G)) +
stat_ellipse(geom = "polygon", alpha=0.2) +
my_theme
# Relation expected value, variance
fit %>%
tidybayes::spread_draws(lambda_log_param[G], sigma_raw_param[G]) %>%
ggplot(aes(x=lambda_log_param, y=sigma_raw_param, group=G)) +
geom_polygon() +
my_theme
# Relation expected value, variance
fit %>%
tidybayes::spread_draws(lambda_log_param[G], sigma_raw_param[G]) %>%
ggplot(aes(x=lambda_log_param, y=sigma_raw_param, group=G)) +
stat_ellipse(geom = "polygon", alpha=0.2) +
my_theme
# Relation expected value, variance
fit %>%
tidybayes::spread_draws(lambda_log_param[G], sigma_raw_param[G]) %>%
ggplot(aes(x=lambda_log_param, y=sigma_raw_param, group=G, color=lambda_log_param)) +
stat_ellipse(geom = "polygon", alpha=0.2) +
my_theme
# Relation expected value, variance
fit %>%
tidybayes::spread_draws(lambda_log_param[G], sigma_raw_param[G]) %>%
ggplot(aes(x=lambda_log_param, y=sigma_raw_param, group=G, alpha=)) +
stat_ellipse( alpha=0.2) +
my_theme
fit %>%
tidybayes::spread_draws(counts_rng[G])
fit %>%
tidybayes::spread_draws(counts_rng[G]) %>%
filter(G==1) %>%
ggplot(aes(x=counts_rng+1)) + geom_density() + scale_x_log10()
fit %>%
tidybayes::spread_draws(counts_rng[G]) %>%
filter(G==1) %>%
ggplot(aes(x=counts_rng+1)) + geom_density() + scale_x_log10() + my_theme
fit %>%
tidybayes::spread_draws(counts_rng[G]) %>%
filter(G==1) %>%
ggplot(aes(x=counts_rng+1)) + geom_density(fill="grey") + scale_x_log10() + my_theme
fit %>%
tidybayes::spread_draws(counts_rng[G]) %>%
filter(G==1) %>%
ggplot(aes(x=counts_rng+1)) + geom_density(fill="grey", color=NULL) + scale_x_log10() + my_theme
fit %>%
tidybayes::spread_draws(counts_rng[G]) %>%
filter(G==1) %>%
ggplot(aes(x=counts_rng+1)) + geom_density(fill="grey") + scale_x_log10() + my_theme
fit %>% traceplot("counts_rng[1]")
fit %>%
tidybayes::spread_draws(counts_rng[G]) %>%
filter(G==1) %>%
ggplot(aes(x=counts_rng+1)) + geom_density(fill="grey") + scale_x_log10() + my_theme
fit %>%
tidybayes::spread_draws(counts_rng[G]) %>%
filter(G==1) %>%
ggplot(aes(x=counts_rng+1)) + geom_density(fill="grey") + my_theme
my_df %>% filter(G==1)
my_df %>% filter(G==1) %>% distinct(sample)
my_df %>% filter(G==1) %>% pull(`read count`)
fit %>%
tidybayes::spread_draws(counts_rng[G]) %>%
filter(G==1) %>%
ggplot(aes(x=counts_rng+1)) +
geom_density(fill="grey") +
geom_vline(
xintercept = my_df %>% filter(G==1) %>% pull(`read count`),
linetype="dotted",
color = "blue",
size=1.5
) +
scale_x_log10() +
my_theme
fit %>%
tidybayes::spread_draws(counts_rng[G]) %>%
filter(G==1) %>%
ggplot(aes(x=counts_rng+1)) +
geom_density(fill="grey") +
geom_vline(
xintercept = my_df %>% filter(G==1) %>% pull(`read count`),
linetype="dotted",
color = "blue",
size=1.5
) +
my_theme
fileConn<-file("~/.R/Makevars")
writeLines(c( "CXX14FLAGS += -O3","CXX14FLAGS += -DSTAN_THREADS", "CXX14FLAGS += -pthread"), fileConn)
close(fileConn)
Sys.setenv("STAN_NUM_THREADS" = cores)
pcc_seq_model = stan_model("inst/stan/negBinomial_MPI.stan")
Sys.time() %>% print
fit =
sampling(
pcc_seq_model, #stanmodels$pcc_seq,
chains=3, cores=3,
iter=400, warmup=400-100,   save_warmup = FALSE
)
Sys.time() %>% print
fit %>%
tidybayes::spread_draws(counts_rng[S,G]) %>%
filter(G==1) %>%
ggplot(aes(x=counts_rng+1, group=S)) +
geom_density(fill="grey") +
geom_vline(
xintercept = my_df %>% filter(G==1) %>% pull(`read count`),
linetype="dotted",
color = "blue",
size=1.5
) +
my_theme
my_df %>% filter(G==1)
fit %>%
tidybayes::spread_draws(counts_rng[S,G]) %>%
filter(G==1) %>%
ggplot(aes(x=counts_rng+1, group=S)) +
geom_density(fill="grey") +
geom_vline(data = my_df %>% filter(G==1), aes(xintercept = `read count`),
linetype="dotted",
color = "blue",
size=1.5
) +
facet_wrap(~ S) +
my_theme
fit %>%
tidybayes::spread_draws(counts_rng[S,G]) %>%
filter(G==1) %>%
ggplot(aes(x=counts_rng+1, group=S)) +
geom_density(fill="grey") +
geom_vline(data = my_df %>% filter(G==1), aes(xintercept = `read count`, color=`Cell type`),
linetype="dotted",
size=1.5
) +
facet_wrap(~ S) +
my_theme
input.df
formula = ~ time + `Cell type`
formula
parse_formula(formula)
formula = ~ time + Cell type
my_df
input.df
input.df %>% colnames
input.df = tidyTranscriptomics::counts %>% rename(ct = `Cell type`)
formula = ~ time + ct
# distinct_at is not released yet for dplyr, thus we have to use this trick
my_df <- input.df %>%
select(!!gene_column, !!sample_column, !!value_column, one_of(parse_formula(formula))) %>%
setNames(c("symbol", "sample", "read count", parse_formula(formula))) %>%
distinct() %>%
# Add symbol idx
left_join(
(.) %>%
distinct(symbol) %>%
mutate(G = 1:n())
) %>%
# Add sample indeces
mutate(S = factor(sample, levels = .$sample %>% unique) %>% as.integer)
my_df
fit %>%
tidybayes::spread_draws(counts_rng[S,G]) %>%
filter(G==1) %>%
ggplot(aes(x=counts_rng+1, group=S)) +
geom_density(fill="grey") +
geom_vline(data = my_df %>% filter(G==1), aes(xintercept = `read count`, color=ct),
linetype="dotted",
size=1.5
) +
facet_wrap(~ S) +
my_theme
counts_MPI =
my_df %>%
select(symbol, sample, `read count`, S, G) %>%
format_for_MPI(shards)
G = counts_MPI %>% distinct(G) %>% nrow()
S = counts_MPI %>% distinct(sample) %>% nrow()
N = counts_MPI %>% distinct(idx_MPI, `read count`, `read count MPI row`) %>%  count(idx_MPI) %>% summarise(max(n)) %>% pull(1)
M = counts_MPI %>% distinct(start, idx_MPI) %>% count(idx_MPI) %>% pull(n) %>% max
G_per_shard = counts_MPI %>% distinct(symbol, idx_MPI) %>% count(idx_MPI) %>% pull(n) %>% as.array
n_shards = min(shards, counts_MPI %>% distinct(idx_MPI) %>% nrow)
G_per_shard_idx = c(0, counts_MPI %>% distinct(symbol, idx_MPI) %>% count(idx_MPI) %>% pull(n) %>% cumsum)
counts =
counts_MPI %>%
distinct(idx_MPI, `read count`, `read count MPI row`)  %>%
spread(idx_MPI,  `read count`) %>%
select(-`read count MPI row`) %>%
replace(is.na(.), 0 %>% as.integer) %>%
as_matrix() %>% t
sample_idx =
counts_MPI %>%
distinct(idx_MPI, S, `read count MPI row`)  %>%
spread(idx_MPI, S) %>%
select(-`read count MPI row`) %>%
replace(is.na(.), 0 %>% as.integer) %>%
as_matrix() %>% t
symbol_end =
counts_MPI %>%
distinct(idx_MPI, end, `symbol MPI row`)  %>%
spread(idx_MPI, end) %>%
bind_rows( (.) %>% head(n=1) %>%  mutate_all(function(x) {0}) ) %>%
arrange(`symbol MPI row`) %>%
select(-`symbol MPI row`) %>%
replace(is.na(.), 0 %>% as.integer) %>%
as_matrix() %>% t
G_ind =
counts_MPI %>%
distinct(idx_MPI, G, `symbol MPI row`)  %>%
spread(idx_MPI, G) %>%
arrange(`symbol MPI row`) %>%
select(-`symbol MPI row`) %>%
replace(is.na(.), 0 %>% as.integer) %>%
as_matrix() %>% t
counts_package =
# Dimensions data sets
rep(c(M, N, S), shards) %>%
matrix(nrow = shards, byrow = T) %>%
cbind(G_per_shard) %>%
cbind(symbol_end) %>%
cbind(sample_idx) %>%
cbind(counts)
CP = ncol(counts_package)
########################################
# Prior info
lambda_mu_mu = 5.612671
########################################
# MODEL
fileConn<-file("~/.R/Makevars")
writeLines(c( "CXX14FLAGS += -O3","CXX14FLAGS += -DSTAN_THREADS", "CXX14FLAGS += -pthread"), fileConn)
close(fileConn)
Sys.setenv("STAN_NUM_THREADS" = cores)
pcc_seq_model = stan_model("inst/stan/negBinomial_MPI.stan")
Sys.time() %>% print
fit =
sampling(
pcc_seq_model, #stanmodels$pcc_seq,
chains=3, cores=3,
iter=400, warmup=400-100,   save_warmup = FALSE
)
Sys.time() %>% print
fit =
sampling(
pcc_seq_model, #stanmodels$pcc_seq,
chains=3, cores=3,
iter=400, warmup=400-100,   save_warmup = FALSE
)
source('/stornext/Bioinf/data/bioinf-data/Papenfuss_lab/projects/mangiola.s/PostDoc/ppcSeq/R/ppcSeq.R', echo=TRUE)
tidyTranscriptomics::counts %>% rename(ct = `Cell type`) %>% pcc_seq(formula = ~ ct)
library(tidyverse)
tidyTranscriptomics::counts %>% rename(ct = `Cell type`) %>% pcc_seq(formula = ~ ct)
debugonce(pcc_seq)
tidyTranscriptomics::counts %>% rename(ct = `Cell type`) %>% pcc_seq(formula = ~ ct)
# distinct_at is not released yet for dplyr, thus we have to use this trick
my_df <- input.df %>%
select(!!gene_column, !!sample_column, !!value_column, one_of(parse_formula(formula))) %>%
setNames(c("symbol", "sample", "read count", parse_formula(formula))) %>%
distinct() %>%
# Add symbol idx
left_join(
(.) %>%
distinct(symbol) %>%
mutate(G = 1:n())
) %>%
# Add sample indeces
mutate(S = factor(sample, levels = .$sample %>% unique) %>% as.integer)
model.matrix(
object = formula,
data = my_df %>% select(sample, one_of(parse_formula(formula))) %>% distinct %>% arrange(sample)
)
source('/stornext/Bioinf/data/bioinf-data/Papenfuss_lab/projects/mangiola.s/PostDoc/ppcSeq/R/ppcSeq.R', echo=TRUE)
source('/stornext/Bioinf/data/bioinf-data/Papenfuss_lab/projects/mangiola.s/PostDoc/ppcSeq/R/ppcSeq.R', echo=TRUE)
tidyTranscriptomics::counts %>% rename(ct = `Cell type`) %>% pcc_seq(formula = ~ ct)
source('/stornext/Bioinf/data/bioinf-data/Papenfuss_lab/projects/mangiola.s/PostDoc/ppcSeq/R/ppcSeq.R', echo=TRUE)
source('/stornext/Bioinf/data/bioinf-data/Papenfuss_lab/projects/mangiola.s/PostDoc/ppcSeq/R/ppcSeq.R', echo=TRUE)
tidyTranscriptomics::counts %>% rename(ct = `Cell type`) %>% pcc_seq(formula = ~ ct)
source('~/PostDoc/ppcSeq/R/ppcSeq.R', echo=TRUE)
tidyTranscriptomics::counts %>% rename(ct = `Cell type`) %>% pcc_seq(formula = ~ ct)
library(tidyverse)
tidyTranscriptomics::counts %>% rename(ct = `Cell type`) %>% pcc_seq(formula = ~ ct)
tidyTranscriptomics::counts
sessionInfo()
source('/stornext/Bioinf/data/bioinf-data/Papenfuss_lab/projects/mangiola.s/PostDoc/ppcSeq/R/ppcSeq.R', echo=TRUE)
inner_join( (.) %>% distinct(symbol) %>% sample_n(300)) %>%
rename(ct = `Cell type`) %>% pcc_seq(formula = ~ ct)
library(tidyverse)
inner_join( (.) %>% distinct(symbol) %>% sample_n(300)) %>%
rename(ct = `Cell type`) %>% pcc_seq(formula = ~ ct)
res = tidyTranscriptomics::counts %>%
inner_join( (.) %>% distinct(symbol) %>% sample_n(300)) %>%
rename(ct = `Cell type`) %>% pcc_seq(formula = ~ ct)
